R"zzz(#version 430 core
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image3D bounding_tex;

// streamed
uniform int mode;
uniform ivec4 mask;

void main() {
    ivec3 loc = ivec3(gl_GlobalInvocationID);
    ivec3 size = ivec3(gl_NumWorkGroups);

    vec4 b_data = imageLoad(bounding_tex, loc);

    // The crazy things i do to avoid branching
    if(sup_mode == 0) { // zero out
        vec4 bounding = imageLoad(bounding_tex, loc);
        // that... was a lot of work to avoid branching
        // basically says that if all are not on edge, keep
        int is_bound = int(all(bvec3(ivec3(greaterThan(loc, vec4(0))) * ivec3(lessThan(loc, size - 1)))));
        b_data = b_data - ivec(is_bound) * mask * b_data;
    }
    else if(sup_mode == 1) { // average, velo reflective
        vec4 b_data_2 = b_data;
        int cnt = 0;

        if (loc.x == 0 || loc.x == size.x - 1) {
            ivec3 subloc = loc;
            subloc.x += int(loc.x == 0) * 2 - 1;
            b_data_2[0] *= -(int(mask[0] == 1) * 2 - 1); // TODO check if this actually helps
            b_data += imageLoad(bounding_tex, subloc); cnt++;
        }
        if (loc.y == 0 || loc.y == size.y - 1) {
            ivec3 subloc = loc;
            subloc.y += int(loc.y == 0) * 2 - 1;
            b_data_2[1] *= -(int(mask[1] == 1) * 2 - 1); // TODO check if this actually helps
            b_data += imageLoad(bounding_tex, subloc); cnt++;
        }
        if (loc.z == 0 || loc.z == size.z - 1) {
            ivec3 subloc = loc;
            subloc.z += int(loc.z == 0) * 2 - 1;
            b_data_2[2] *= -(int(mask[2] == 1) * 2 - 1); // TODO check if this actually helps
            b_data += imageLoad(bounding_tex, subloc); cnt++;
        }

        if(cnt == 1)
            b_data = b_data_2;
        else if(cnt > 1)
            b_data /= cnt;
    }

    vec4 src_data = imageLoad(bounding_tex, loc);
    b_data = src_data + mask * (b_data - src_data);
    
    imageStore(bounding_tex, loc, b_data);
}
)zzz"