R"zzz(#version 430 core
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image3D bounding_tex;

// streamed
uniform int sup_mode;
uniform int mode;
uniform int channel;

void main() {
    ivec3 loc = gl_GlobalInvocationID;
    ivec3 size = gl_NumWorkGroups;

    // The crazy things i do to avoid branching
    if(sup_mode == 0) { // zero out
        vec4 bounding = imageLoad(bounding_tex, loc);
        // that... was a lot of work to avoid branching
        // basically says that if all are not on edge, keep
        bounding[channel] *= int(all(bvec3(ivec3(greaterThan(loc, vec4(0))) * ivec3(lessThan(loc, size - 1)))));
        imageStore(bounding_tex, loc, bounding);
    }
    else if(sup_mode == 1) { // average, velo reflective
        // sides
        if (loc.x == 0 || loc.x == size.x - 1) {
            ivec3 subloc = loc;
            subloc.x += int(loc.x == 0) * 2 - 1;
            imageStore(bounding_tex, loc, imageLoad(bounding_tex, subloc) * -(sign(int(mode == 1) * 2 - 1)); // TODO check if this actually helps
        }
        if (loc.y == 0 || loc.y == size.y - 1) {
            ivec3 subloc = loc;
            subloc.y += int(loc.y == 0) * 2 - 1;
            imageStore(bounding_tex, loc, imageLoad(bounding_tex, subloc) * -(sign(int(mode == 2) * 2 - 1)); // TODO check if this actually helps
        }
        if (loc.z == 0 || loc.z == size.z - 1) {
            ivec3 subloc = loc;
            subloc.z += int(loc.z == 0) * 2 - 1;
            imageStore(bounding_tex, loc, imageLoad(bounding_tex, subloc) * -(sign(int(mode == 3) * 2 - 1)); // TODO check if this actually helps
        }

        // borders, should probably factor out the if statements after this point... but I'm tired
        ivec3 border_subloc0 = loc;
        ivec3 border_subloc1 = loc;
        bool use = false;
        if (loc.y == 0) {
            if (loc.z == 0) {
                border_subloc0 += ivec3( 0,  1,  0);
                border_subloc1 += ivec3( 0,  0,  1);
                use = true;
            }
            if (loc.z == size.z - 1) {
                border_subloc0 += ivec3( 0,  1,  0);
                border_subloc1 += ivec3( 0,  0, -1);
                use = true;
            }
        }
        if (loc.y == size.y - 1) {
            if (loc.z == 0) {
                border_subloc0 += ivec3( 0, -1,  0);
                border_subloc1 += ivec3( 0,  0,  1);
                use = true;
            }
            if (loc.z == size.z - 1) {
                border_subloc0 += ivec3( 0, -1,  0);
                border_subloc1 += ivec3( 0,  0, -1);
                use = true;
            }
        }
        imageStore(bounding_tex, loc, (imageLoad(bounding_tex, border_subloc0) + imageLoad(bounding_tex, border_subloc1)) / 2.0;

        use = false;
        border_subloc0 = loc;
        border_subloc1 = loc;
        if (loc.x == 0) {
            if (loc.z == 0) {
                border_subloc0 += ivec3( 1,  0,  0);
                border_subloc1 += ivec3( 0,  0,  1);
                use = true;
            }
            if (loc.z == size.z - 1) {
                border_subloc0 += ivec3( 1,  0,  0);
                border_subloc1 += ivec3( 0,  0, -1);
                use = true;
            }
        }
        if (loc.x == size.x - 1) {
            if (loc.z == 0) {
                border_subloc0 += ivec3(-1,  0,  0);
                border_subloc1 += ivec3( 0,  0,  1);
                use = true;
            }
            if (loc.z == size.z - 1) {
                border_subloc0 += ivec3(-1,  0,  0);
                border_subloc1 += ivec3( 0,  0, -1);
                use = true;
            }
        }
        imageStore(bounding_tex, loc, (imageLoad(bounding_tex, border_subloc0) + imageLoad(bounding_tex, border_subloc1)) / 2.0;

        use = false;
        border_subloc0 = loc;
        border_subloc1 = loc;
        if (loc.x == 0) {
            if (loc.y == 0) {
                border_subloc0 += ivec3( 1,  0,  0);
                border_subloc1 += ivec3( 0,  0,  1);
                use = true;
            }
            if (loc.y == size.y - 1) {
                border_subloc0 += ivec3( 1,  0,  0);
                border_subloc1 += ivec3( 0,  0, -1);
                use = true;
            }
        }
        if (loc.x == size.x - 1) {
            if (loc.y == 0) {
                border_subloc0 += ivec3(-1,  0,  0);
                border_subloc1 += ivec3( 0,  0,  1);
                use = true;
            }
            if (loc.y == size.y - 1) {
                border_subloc0 += ivec3(-1,  0,  0);
                border_subloc1 += ivec3( 0,  0, -1);
                use = true;
            }
        }
        imageStore(bounding_tex, loc, (imageLoad(bounding_tex, border_subloc0) + imageLoad(bounding_tex, border_subloc1)) / 2.0;

        // corners
        if (all(loc == ivec3(0))) {
            imageStore(bounding_tex, loc, (imageLoad(bounding_tex, at(), 0, 0)]
                        + imageLoad(bounding_tex, at(), 1, 0)]
                        + imageLoad(bounding_tex, at(), 0, 1)]) / 3.0;
        }
        if (all(loc == ivec3(size.x-1, 0, ))) {
            imageStore(bounding_tex, loc, (imageLoad(bounding_tex, at(size.x-2, 0, 0))
                               + imageLoad(bounding_tex, at(size.x-1, 1, 0))
                               + imageLoad(bounding_tex, at(size.x-1, 0, 1))) / 3.0;
        }
        if (all(loc == ivec3(0, size.y-1, 0))) {
            imageStore(bounding_tex, loc, (imageLoad(bounding_tex, at(1, size.y-1, 0))
                               + imageLoad(bounding_tex, at(0, size.y-2, 0))
                               + imageLoad(bounding_tex, at(0, size.y-1, 1))) / 3.0;
        }
        if (all(loc == ivec3(0, 0, size.z-1))) {
            imageStore(bounding_tex, loc, (imageLoad(bounding_tex, at(1, 0, size.z-1))
                               + imageLoad(bounding_tex, at(0, 1, size.z-1))
                               + imageLoad(bounding_tex, at(0, 0, size.z-2))) / 3.0;
        }
        if (all(loc == ivec3(0, size.y-1, size.z-1))) {
            imageStore(bounding_tex, loc, (imageLoad(bounding_tex, at(1, size.y-1, size.z-1))
                                      + imageLoad(bounding_tex, at(0, size.y-2, size.z-1))
                                      + imageLoad(bounding_tex, at(0, size.y-1, size.z-2))) / 3.0;
        }
        if (all(loc == ivec3(size.x-1, 0, size.z-1))) {
            imageStore(bounding_tex, loc, (imageLoad(bounding_tex, at(size.x-2, 0, size.z-1))
                                      + imageLoad(bounding_tex, at(size.x-1, 1, size.z-1))
                                      + imageLoad(bounding_tex, at(size.x-1, 0, size.z-2))) / 3.0;
        }
        if (all(loc == ivec3(size.x-1, size.y-1, 0))) {
            imageStore(bounding_tex, loc, (imageLoad(bounding_tex, at(size.x-2, size.y-1, 0))
                                      + imageLoad(bounding_tex, at(size.x-1, size.y-2, 0))
                                      + imageLoad(bounding_tex, at(size.x-1, size.y-1, 1))) / 3.0;
        }
        if (all(loc == ivec3(size.x-1, size.y-1, size.z-1))) {
            imageStore(bounding_tex, loc, (imageLoad(bounding_tex, at(size.x-2, size.y-1, size.z-1))
                                             + imageLoad(bounding_tex, at(size.x-1, size.y-2, size.z-1))
                                             + imageLoad(bounding_tex, at(size.x-1, size.y-1, size.z-2))) / 3.0;
        }
    }
}
)zzz"